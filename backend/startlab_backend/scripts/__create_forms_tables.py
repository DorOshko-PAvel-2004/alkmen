#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ñ–æ—Ä–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ PostgreSQL
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã: –≤–æ–ø—Ä–æ—Å—ã, —Ñ–æ—Ä–º—ã, –≤–æ–ø—Ä–æ—Å—ã —Ñ–æ—Ä–º—ã, –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º—É
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config.database import execute_query

def create_forms_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    # SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    tables_sql = [
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        CREATE TABLE IF NOT EXISTS questions (
            id SERIAL PRIMARY KEY,
            question_text TEXT NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ–æ—Ä–º
        """
        CREATE TABLE IF NOT EXISTS forms (
            id SERIAL PRIMARY KEY,
            name VARCHAR(200) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ñ–æ—Ä–º—ã (—Å–≤—è–∑—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞)
        """
        CREATE TABLE IF NOT EXISTS form_questions (
            id SERIAL PRIMARY KEY,
            form_id INTEGER NOT NULL REFERENCES forms(id) ON DELETE CASCADE,
            question_id INTEGER NOT NULL REFERENCES questions(id) ON DELETE CASCADE,
            question_order INTEGER NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW(),
            UNIQUE(form_id, question_id),
            UNIQUE(form_id, question_order)
        )
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ä–º—É
        """
        CREATE TABLE IF NOT EXISTS form_answers (
            id SERIAL PRIMARY KEY,
            sha256_hash VARCHAR(64) NOT NULL,
            form_question_id INTEGER NOT NULL REFERENCES form_questions(id) ON DELETE CASCADE,
            answer_txt TEXT,
            answer_docx BYTEA,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        for i, sql in enumerate(tables_sql, 1):
            table_names = ["questions", "forms", "form_questions", "form_answers"]
            print(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_names[i-1]} ({i}/{len(tables_sql)})...")
            execute_query(sql, fetch=False)
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        indexes_sql = [
            "CREATE INDEX IF NOT EXISTS ix_form_questions_form_id ON form_questions(form_id)",
            "CREATE INDEX IF NOT EXISTS ix_form_questions_question_id ON form_questions(question_id)",
            "CREATE INDEX IF NOT EXISTS ix_form_questions_order ON form_questions(form_id, question_order)",
            "CREATE INDEX IF NOT EXISTS ix_form_answers_sha256 ON form_answers(sha256_hash)",
            "CREATE INDEX IF NOT EXISTS ix_form_answers_form_question_id ON form_answers(form_question_id)",
            "CREATE INDEX IF NOT EXISTS ix_questions_created_at ON questions(created_at)",
            "CREATE INDEX IF NOT EXISTS ix_forms_created_at ON forms(created_at)"
        ]
        
        for index_sql in indexes_sql:
            execute_query(index_sql, fetch=False)
        
        print("‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        add_test_data()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        print("\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        print("1. questions - —Ç–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (id, question_text)")
        print("2. forms - —Ç–∞–±–ª–∏—Ü–∞ —Ñ–æ—Ä–º (id, name)")
        print("3. form_questions - —Å–≤—è–∑—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ (id, form_id, question_id, question_order)")
        print("4. form_answers - —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–≤–µ—Ç–æ–≤ (id, sha256_hash, form_question_id, answer_txt, answer_docx)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        raise

def add_test_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        execute_query("DELETE FROM form_answers", fetch=False)
        execute_query("DELETE FROM form_questions", fetch=False)
        execute_query("DELETE FROM questions", fetch=False)
        execute_query("DELETE FROM forms", fetch=False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—ã
        print("üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º...")
        forms_data = [
            "–ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –°–¢–ê–†–¢–õ–ê–ë",
            "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        ]
        
        for form_name in forms_data:
            execute_query(
                "INSERT INTO forms (name) VALUES (%s)",
                (form_name,),
                fetch=False
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        print("‚ùì –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        questions_data = [
            # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—ã (–ê–Ω–∫–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞)
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
            "–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?",
            "–í –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ?",
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?",
            
            # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ä–º—ã (–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞)
            "–û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10",
            "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?",
            "–ö–∞–∫–∏–µ –±—ã–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?",
            "–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥—Ä—É–≥–∏–º?"
        ]
        
        for question_text in questions_data:
            execute_query(
                "INSERT INTO questions (question_text) VALUES (%s)",
                (question_text,),
                fetch=False
            )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —Ñ–æ—Ä–º–∞–º–∏
        print("üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ñ–æ—Ä–º–∞–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ä–º
        forms_result = execute_query("SELECT id FROM forms ORDER BY id")
        form_ids = [row['id'] for row in forms_result]
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_result = execute_query("SELECT id FROM questions ORDER BY id")
        question_ids = [row['id'] for row in questions_result]
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º–æ–π (–ø–µ—Ä–≤—ã–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤)
        for i, question_id in enumerate(question_ids[:5], 1):
            execute_query(
                "INSERT INTO form_questions (form_id, question_id, question_order) VALUES (%s, %s, %s)",
                (form_ids[0], question_id, i),
                fetch=False
            )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å–æ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ä–º–æ–π (—Å–ª–µ–¥—É—é—â–∏–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤)
        for i, question_id in enumerate(question_ids[5:], 1):
            execute_query(
                "INSERT INTO form_questions (form_id, question_id, question_order) VALUES (%s, %s, %s)",
                (form_ids[1], question_id, i),
                fetch=False
            )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        forms_count = execute_query("SELECT COUNT(*) as count FROM forms")[0]['count']
        questions_count = execute_query("SELECT COUNT(*) as count FROM questions")[0]['count']
        form_questions_count = execute_query("SELECT COUNT(*) as count FROM form_questions")[0]['count']
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  - –§–æ—Ä–º: {forms_count}")
        print(f"  - –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
        print(f"  - –°–≤—è–∑–µ–π –≤–æ–ø—Ä–æ—Å-—Ñ–æ—Ä–º–∞: {form_questions_count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        raise

def verify_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        check_tables_sql = """
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('questions', 'forms', 'form_questions', 'form_answers')
        ORDER BY table_name
        """
        
        result = execute_query(check_tables_sql)
        existing_tables = [row['table_name'] for row in result]
        
        expected_tables = ['questions', 'forms', 'form_questions', 'form_answers']
        
        print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
        for table in existing_tables:
            print(f"  ‚úÖ {table}")
        
        missing_tables = set(expected_tables) - set(existing_tables)
        if missing_tables:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            return False
        else:
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä–º –∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    print("=" * 60)
    
    try:
        create_forms_tables()
        verify_tables()
        print("\nüéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
