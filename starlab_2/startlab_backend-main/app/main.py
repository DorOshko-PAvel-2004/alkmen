"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –°–¢–ê–†–¢–õ–ê–ë
"""

import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
PROJECT_NAME = os.getenv("PROJECT_NAME")
if not PROJECT_NAME:
    raise ValueError("PROJECT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

PROJECT_DESCRIPTION = os.getenv("PROJECT_DESCRIPTION")
if not PROJECT_DESCRIPTION:
    raise ValueError("PROJECT_DESCRIPTION –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

PROJECT_VERSION = os.getenv("PROJECT_VERSION")
if not PROJECT_VERSION:
    raise ValueError("PROJECT_VERSION –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS")
if not ALLOWED_ORIGINS:
    raise ValueError("ALLOWED_ORIGINS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ (comma-separated list)")
ALLOWED_ORIGINS = [origin.strip() for origin in ALLOWED_ORIGINS.split(",")]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
HOST = os.getenv("HOST")
if not HOST:
    raise ValueError("HOST –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

PORT = os.getenv("PORT")
if not PORT:
    raise ValueError("PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
PORT = int(PORT)

DEBUG = os.getenv("DEBUG")
if not DEBUG:
    raise ValueError("DEBUG –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
DEBUG = DEBUG.lower() == "true"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from .api.faqs import router as faqs_router
from .api.news import router as news_router
from .api.partners import router as partners_router
from .api.application import router as application_router
from .api.documents import router as documents_router

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title=PROJECT_NAME,
    description=PROJECT_DESCRIPTION,
    version=PROJECT_VERSION,
    debug=DEBUG
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
@app.middleware("http")
async def add_charset_middleware(request, call_next):
    response = await call_next(request)
    
    # –ù–µ –∏–∑–º–µ–Ω—è–µ–º Content-Type –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö endpoints FastAPI
    if not request.url.path.startswith(('/docs', '/redoc', '/openapi.json')):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JSON –æ—Ç–≤–µ—Ç
        if "application/json" in response.headers.get("content-type", ""):
            response.headers["Content-Type"] = "application/json; charset=utf-8"
    
    return response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=False,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã (—Ç–µ–≥–∏ –∑–∞–¥–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–∏—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
app.include_router(faqs_router)
app.include_router(news_router)
app.include_router(partners_router)
app.include_router(application_router, prefix="/api")
app.include_router(documents_router)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
media_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'media'))
print(f"üîç Media path: {media_path}")
print(f"üîç Media path exists: {os.path.exists(media_path)}")
if os.path.exists(media_path):
    app.mount("/media", StaticFiles(directory=media_path), name="media")
    print("‚úÖ Media files mounted successfully")
else:
    print("‚ùå Media path does not exist")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {PROJECT_NAME}!",
        "version": PROJECT_VERSION,
        "description": PROJECT_DESCRIPTION,
        "docs": "/docs",
        "redoc": "/redoc",
        "config": {
            "host": HOST,
            "port": PORT,
            "debug": DEBUG,
            "cors_origins": ALLOWED_ORIGINS
        }
    }

@app.get("/test-media")
async def test_media():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    import os
    media_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'media'))
    partners_path = os.path.join(media_path, 'partners')
    
    return {
        "media_path": media_path,
        "media_exists": os.path.exists(media_path),
        "partners_path": partners_path,
        "partners_exists": os.path.exists(partners_path),
        "files": os.listdir(partners_path) if os.path.exists(partners_path) else []
    }

# OPTIONS –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è CORS middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    ENVIRONMENT = os.getenv("ENVIRONMENT")
    if not ENVIRONMENT:
        raise ValueError("ENVIRONMENT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    
    return {
        "status": "healthy", 
        "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        "config": {
            "project_name": PROJECT_NAME,
            "version": PROJECT_VERSION,
            "environment": ENVIRONMENT
        }
    }

@app.get("/config")
async def get_config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    if not DEBUG:
        return {"message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"}
    
    return {
        "project": {
            "name": PROJECT_NAME,
            "description": PROJECT_DESCRIPTION,
            "version": PROJECT_VERSION
        },
        "server": {
            "host": HOST,
            "port": PORT,
            "debug": DEBUG
        },
        "cors": {
            "allowed_origins": ALLOWED_ORIGINS
        },
        "environment": os.getenv("ENVIRONMENT")
    }
