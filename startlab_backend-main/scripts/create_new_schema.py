#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã (–∑–∞—è–≤–∫–∏/—Ñ–æ—Ä–º—ã/–≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã) –≤ PostgreSQL.

–ó–∞–ø—É—Å–∫:
  python scripts/create_new_schema.py
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å app.config.database
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config.database import execute_query


def create_new_schema_tables():
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã...")

    tables_sql = [
        # –ó–∞—è–≤–∫–∞
        """
        CREATE TABLE IF NOT EXISTS submissions (
            id SERIAL PRIMARY KEY,
            title VARCHAR(300) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,

        # –§–æ—Ä–º–∞ (–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞—è–≤–∫–µ)
        """
        CREATE TABLE IF NOT EXISTS forms (
            id SERIAL PRIMARY KEY,
            submission_id INTEGER NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
            name VARCHAR(300) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,

        # –í–æ–ø—Ä–æ—Å –∑–∞—è–≤–∫–∏
        """
        CREATE TABLE IF NOT EXISTS submission_questions (
            id SERIAL PRIMARY KEY,
            submission_id INTEGER NOT NULL REFERENCES submissions(id) ON DELETE CASCADE,
            question_text TEXT NOT NULL,
            question_order INTEGER NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,

        # –í–æ–ø—Ä–æ—Å —Ñ–æ—Ä–º—ã (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞—è–≤–∫–∏; —Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞)
        """
        CREATE TABLE IF NOT EXISTS form_questions (
            id SERIAL PRIMARY KEY,
            form_id INTEGER NOT NULL REFERENCES forms(id) ON DELETE CASCADE,
            submission_question_id INTEGER NOT NULL REFERENCES submission_questions(id) ON DELETE CASCADE,
            question_text TEXT NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,

        # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ñ–æ—Ä–º—ã
        """
        CREATE TABLE IF NOT EXISTS form_answers (
            id SERIAL PRIMARY KEY,
            form_question_id INTEGER NOT NULL REFERENCES form_questions(id) ON DELETE CASCADE,
            answer_text TEXT,
            sha256_hash VARCHAR(64) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,

        # –£—á–∞—Å—Ç–Ω–∏–∫ (–ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–æ—Ä–º–µ)
        """
        CREATE TABLE IF NOT EXISTS participants (
            id SERIAL PRIMARY KEY,
            form_id INTEGER NOT NULL REFERENCES forms(id) ON DELETE CASCADE,
            last_name VARCHAR(100) NOT NULL,
            first_name VARCHAR(100) NOT NULL,
            middle_name VARCHAR(100),
            faculty VARCHAR(200),
            student_group VARCHAR(50),
            phone VARCHAR(50),
            email VARCHAR(150),
            key_competencies TEXT,
            role_in_implementation VARCHAR(200),
            sha256_hash VARCHAR(64) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,

        # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (–ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–æ—Ä–º–µ)
        """
        CREATE TABLE IF NOT EXISTS supervisors (
            id SERIAL PRIMARY KEY,
            form_id INTEGER NOT NULL REFERENCES forms(id) ON DELETE CASCADE,
            last_name VARCHAR(100) NOT NULL,
            first_name VARCHAR(100) NOT NULL,
            middle_name VARCHAR(100),
            academic_rank VARCHAR(200),
            position VARCHAR(200),
            phone VARCHAR(50),
            email VARCHAR(150),
            sha256_hash VARCHAR(64) NOT NULL,
            created_at TIMESTAMP NOT NULL DEFAULT NOW()
        )
        """,
    ]

    for i, sql in enumerate(tables_sql, 1):
        execute_query(sql, fetch=False)
        print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i}/{len(tables_sql)} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

    print("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
    indexes_sql = [
        # forms
        "CREATE INDEX IF NOT EXISTS ix_forms_submission_id ON forms(submission_id)",
        # submission_questions
        "CREATE INDEX IF NOT EXISTS ix_submission_questions_submission_id ON submission_questions(submission_id)",
        "CREATE INDEX IF NOT EXISTS ix_submission_questions_order ON submission_questions(submission_id, question_order)",
        # form_questions
        "CREATE INDEX IF NOT EXISTS ix_form_questions_form_id ON form_questions(form_id)",
        "CREATE INDEX IF NOT EXISTS ix_form_questions_submission_question_id ON form_questions(submission_question_id)",
        # form_answers
        "CREATE INDEX IF NOT EXISTS ix_form_answers_form_question_id ON form_answers(form_question_id)",
        "CREATE INDEX IF NOT EXISTS ix_form_answers_sha256 ON form_answers(sha256_hash)",

        # participants / supervisors
        "CREATE INDEX IF NOT EXISTS ix_participants_form_id ON participants(form_id)",
        "CREATE INDEX IF NOT EXISTS ix_participants_sha256 ON participants(sha256_hash)",
        "CREATE INDEX IF NOT EXISTS ix_supervisors_form_id ON supervisors(form_id)",
        "CREATE INDEX IF NOT EXISTS ix_supervisors_sha256 ON supervisors(sha256_hash)",
    ]

    for sql in indexes_sql:
        execute_query(sql, fetch=False)

    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")


def main():
    try:
        create_new_schema_tables()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã: {e}")
        raise


if __name__ == "__main__":
    main()


