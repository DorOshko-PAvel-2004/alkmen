from ..config.database import execute_query, execute_single_query
from typing import List, Dict, Any

# Partner —Ñ—É–Ω–∫—Ü–∏–∏
def get_partners() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    try:
        query = """
            SELECT id, name, title, logo, description, website, is_active, created_at
            FROM partners 
            WHERE is_active = true 
            ORDER BY name
        """
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {query}")
        
        result = execute_query(query)
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç execute_query –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {result}")
        
        if result is None:
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
            return []
        
        if len(result) == 0:
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        cleaned_result = []
        for i, row in enumerate(result):
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {i}: {row}")
            
            if isinstance(row, dict):
                print(f"üîç –ü–∞—Ä—Ç–Ω–µ—Ä —É–∂–µ —Å–ª–æ–≤–∞—Ä—å: {row}")
                # –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
                if row.get('logo'):
                    row['logo_url'] = f"/media/{row['logo']}"
                cleaned_result.append(row)
            else:
                print(f"üîç –ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å")
                cleaned_row = {
                    'id': getattr(row, 'id', None),
                    'name': getattr(row, 'name', ''),
                    'title': getattr(row, 'title', None),
                    'description': getattr(row, 'description', None),
                    'website': getattr(row, 'website', None),
                    'is_active': getattr(row, 'is_active', True),
                    'created_at': getattr(row, 'created_at', None)
                }
                # –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
                logo = getattr(row, 'logo', None)
                if logo:
                    cleaned_row['logo_url'] = f"/media/{logo}"
                print(f"üîç –°–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {cleaned_row}")
                cleaned_result.append(cleaned_row)
        
        print(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {cleaned_result}")
        return cleaned_result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_partners: {e}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        return []

def get_partner(partner_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ ID"""
    query = """
        SELECT id, name, title, logo, description, website, is_active, created_at
        FROM partners 
        WHERE id = %s AND is_active = true
    """
    result = execute_single_query(query, (partner_id,))
    if result and result.get('logo'):
        result['logo_url'] = f"/media/{result['logo']}"
    return result

# FAQ —Ñ—É–Ω–∫—Ü–∏–∏
def get_faqs() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ FAQ"""
    try:
        query = """
            SELECT id, question, answer, "order", is_active, image, created_at
            FROM faqs 
            WHERE is_active = true 
            ORDER BY "order"
        """
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query}")
        
        result = execute_query(query)
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç execute_query: {result}")
        print(f"üîç –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        print(f"üîç –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(result) if result else 0}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result is None:
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
            return []
        
        if len(result) == 0:
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        cleaned_result = []
        for i, row in enumerate(result):
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {i}: {row}")
            print(f"üîç –¢–∏–ø —Å—Ç—Ä–æ–∫–∏: {type(row)}")
            
            if isinstance(row, dict):
                print(f"üîç –°—Ç—Ä–æ–∫–∞ —É–∂–µ —Å–ª–æ–≤–∞—Ä—å: {row}")
                # –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å, –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                cleaned_result.append(row)
            else:
                # –ï—Å–ª–∏ row –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
                print(f"üîç –°—Ç—Ä–æ–∫–∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å")
                cleaned_row = {
                    'id': getattr(row, 'id', None),
                    'question': getattr(row, 'question', ''),
                    'answer': getattr(row, 'answer', ''),
                    'order': getattr(row, 'order', 0),
                    'is_active': getattr(row, 'is_active', True),
                    'created_at': getattr(row, 'created_at', None)
                }
                print(f"üîç –°–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: {cleaned_row}")
                cleaned_result.append(cleaned_row)
        
        print(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {cleaned_result}")
        return cleaned_result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_faqs: {e}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        return []

def get_faq(faq_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å FAQ –ø–æ ID"""
    query = """
        SELECT id, question, answer, "order", is_active, image, created_at
        FROM faqs 
        WHERE id = %s AND is_active = true
    """
    return execute_single_query(query, (faq_id,))



# News —Ñ—É–Ω–∫—Ü–∏–∏
def get_news() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        query = """
            SELECT id, title, content, image, is_active, created_at, updated_at
            FROM news 
            WHERE is_active = true 
            ORDER BY created_at DESC
        """
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π: {query}")
        
        result = execute_query(query)
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç execute_query –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π: {result}")
        
        if result is None:
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç None, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
            return []
        
        if len(result) == 0:
            print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º []")
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        cleaned_result = []
        for i, row in enumerate(result):
            print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å {i}: {row}")
            
            if isinstance(row, dict):
                print(f"üîç –ù–æ–≤–æ—Å—Ç—å —É–∂–µ —Å–ª–æ–≤–∞—Ä—å: {row}")
                cleaned_result.append(row)
            else:
                print(f"üîç –ù–æ–≤–æ—Å—Ç—å –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å")
                cleaned_row = {
                    'id': getattr(row, 'id', None),
                    'title': getattr(row, 'title', ''),
                    'content': getattr(row, 'content', ''),
                    'image_url': getattr(row, 'image_url', None),
                    'is_active': getattr(row, 'is_active', True),
                    'created_at': getattr(row, 'created_at', None),
                    'updated_at': getattr(row, 'updated_at', None)
                }
                print(f"üîç –°–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤–æ—Å—Ç–∏: {cleaned_row}")
                cleaned_result.append(cleaned_row)
        
        print(f"üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ–≤–æ—Å—Ç–µ–π: {cleaned_result}")
        return cleaned_result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_news: {e}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        return []

def get_news_item(news_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID"""
    query = """
        SELECT id, title, content, image, is_active, created_at, updated_at
        FROM news 
        WHERE id = %s AND is_active = true
    """
    return execute_single_query(query, (news_id,))
