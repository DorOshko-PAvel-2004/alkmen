#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–¢–ê–†–¢–õ–ê–ë Backend
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç psycopg2 –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
from contextlib import contextmanager
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: POSTGRES_* (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ) –∏ DB_* (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)

PG_HOST = os.getenv("POSTGRES_HOST")
PG_PORT = os.getenv("POSTGRES_PORT")
PG_DB = os.getenv("POSTGRES_DB")
PG_USER = os.getenv("POSTGRES_USER")
PG_PASSWORD = os.getenv("POSTGRES_PASSWORD")

DB_HOST_FALLBACK = os.getenv("DB_HOST")
DB_PORT_FALLBACK = os.getenv("DB_PORT")
DB_NAME_FALLBACK = os.getenv("DB_NAME")
DB_USER_FALLBACK = os.getenv("DB_USER")
DB_PASSWORD_FALLBACK = os.getenv("DB_PASSWORD")

if all([PG_HOST, PG_PORT, PG_DB, PG_USER, PG_PASSWORD]):
    DB_HOST = PG_HOST
    DB_PORT = int(PG_PORT)
    DB_NAME = PG_DB
    DB_USER = PG_USER
    DB_PASSWORD = PG_PASSWORD
elif all([DB_HOST_FALLBACK, DB_PORT_FALLBACK, DB_NAME_FALLBACK, DB_USER_FALLBACK, DB_PASSWORD_FALLBACK]):
    DB_HOST = DB_HOST_FALLBACK
    DB_PORT = int(DB_PORT_FALLBACK)
    DB_NAME = DB_NAME_FALLBACK
    DB_USER = DB_USER_FALLBACK
    DB_PASSWORD = DB_PASSWORD_FALLBACK
else:
    missing = []
    for key, val in {
        "POSTGRES_HOST": PG_HOST,
        "POSTGRES_PORT": PG_PORT,
        "POSTGRES_DB": PG_DB,
        "POSTGRES_USER": PG_USER,
        "POSTGRES_PASSWORD": PG_PASSWORD,
    }.items():
        if not val:
            missing.append(key)
    # –ï—Å–ª–∏ –Ω–µ –≤—Å–µ POSTGRES_* –∑–∞–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∏–º DB_* –∏ —É–∫–∞–∂–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω –æ–¥–∏–Ω –∏–∑ –Ω–∞–±–æ—Ä–æ–≤
    raise ValueError(
        "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î. –ó–∞–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä POSTGRES_* –∏–ª–∏ DB_*: "
        f"POSTGRES_HOST, POSTGRES_PORT, POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing)}"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
DB_POOL_SIZE = os.getenv("DB_POOL_SIZE")
if not DB_POOL_SIZE:
    raise ValueError("DB_POOL_SIZE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
DB_POOL_SIZE = int(DB_POOL_SIZE)

DB_MAX_OVERFLOW = os.getenv("DB_MAX_OVERFLOW")
if not DB_MAX_OVERFLOW:
    raise ValueError("DB_MAX_OVERFLOW –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
DB_MAX_OVERFLOW = int(DB_MAX_OVERFLOW)

DB_POOL_TIMEOUT = os.getenv("DB_POOL_TIMEOUT")
if not DB_POOL_TIMEOUT:
    raise ValueError("DB_POOL_TIMEOUT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
DB_POOL_TIMEOUT = int(DB_POOL_TIMEOUT)

DB_POOL_RECYCLE = os.getenv("DB_POOL_RECYCLE")
if not DB_POOL_RECYCLE:
    raise ValueError("DB_POOL_RECYCLE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
DB_POOL_RECYCLE = int(DB_POOL_RECYCLE)

def get_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ DATABASE_URL
        connection = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            options='-c client_encoding=utf8',
            client_encoding='utf8'
        )
        return connection
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ:")
        print(f"  DB_HOST: {DB_HOST}")
        print(f"  DB_PORT: {DB_PORT}")
        print(f"  DB_NAME: {DB_NAME}")
        print(f"  DB_USER: {DB_USER}")
        raise

@contextmanager
def get_db():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    connection = None
    try:
        connection = get_connection()
        yield connection
    except Exception as e:
        if connection:
            connection.rollback()
        raise
    finally:
        if connection:
            connection.close()

def execute_query(query, params=None, fetch=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        with get_db() as connection:
            with connection.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute(query, params)
                if fetch:
                    result = cursor.fetchall()
                    print(f"üîç execute_query: –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                    print(f"üîç execute_query: —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
                    if result and len(result) > 0:
                        print(f"üîç execute_query: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: {result[0]}")
                        print(f"üîç execute_query: —Ç–∏–ø –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: {type(result[0])}")
                    return result
                else:
                    connection.commit()
                    return cursor.rowcount
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ execute_query: {e}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        if fetch:
            return []
        else:
            return 0

def execute_single_query(query, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å"""
    with get_db() as connection:
        with connection.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute(query, params)
            result = cursor.fetchone()
            # –ö–æ–º–º–∏—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è INSERT/UPDATE/DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
            query_upper = query.strip().upper()
            if any(query_upper.startswith(cmd) for cmd in ['INSERT', 'UPDATE', 'DELETE']):
                connection.commit()
            return result

def create_tables():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—è SQL —Å–∫—Ä–∏–ø—Ç—ã"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
    print(f"–•–æ—Å—Ç: {DB_HOST}:{DB_PORT}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {DB_USER}")
    
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ create_tables.py")
